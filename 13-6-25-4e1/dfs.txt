import java.util.*;
public class DFSGraph {
    private int vertices; 
    private LinkedList<Integer>[] adjList; 
    DFSGraph(int v) {
        vertices = v;
        adjList = new LinkedList[v];
        for (int i = 0; i < v; ++i)
            adjList[i] = new LinkedList<>();
    }
    void addEdge(int v, int w) {
        adjList[v].add(w); 
    }
    void DFS(int start) {
        boolean[] visited = new boolean[vertices];
        System.out.print("DFS starting from node " + start + ": ");
        DFSUtil(start, visited);
        System.out.println();
    }
    private void DFSUtil(int v, boolean[] visited) {
        visited[v] = true;
        System.out.print(v + " ");
        for (int neighbor : adjList[v]) {
            if (!visited[neighbor])
                DFSUtil(neighbor, visited);
        }
    }
    public static void main(String[] args) {
        DFSGraph graph = new DFSGraph(5);
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.DFS(0); 
    }
}
